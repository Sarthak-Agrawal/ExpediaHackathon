package com.expedia.www.hackathon.backpackersPool.controllers;


import com.expedia.www.hackathon.backpackersPool.models.Customer;
import com.expedia.www.hackathon.backpackersPool.models.Trip;
import com.expedia.www.hackathon.backpackersPool.repositories.CustomerRepository;
import com.expedia.www.hackathon.backpackersPool.repositories.TripRepository;
import com.expedia.www.hackathon.backpackersPool.service.Utils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.ModelAndView;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


@Controller    // This means that this class is a Controller
public class MainController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private TripRepository tripRepository;
    @Autowired
    private CustomerRepository customerRepository;

    @GetMapping(path="/add") // Map ONLY GET Requests
    public ModelAndView addNewUser (@RequestParam String tid, @RequestParam String tuid, @RequestParam String location,
                                            @RequestParam Date initialDate, @RequestParam Date finalDate, @RequestParam Boolean trekking,
                                            @RequestParam Boolean religious, @RequestParam Boolean localinteraction, @RequestParam Boolean sighseeing,
                                            @RequestParam Boolean nightlife, @RequestParam Integer language,
                                            @RequestParam Boolean smoking, @RequestParam Boolean sports, @RequestParam Integer age) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        // tid integer PRIMARY KEY , tuid integer , location varchar(100), time timestamp, finalDate
        // trekking tinyint(1),religious tinyint(1), localinteraction tinyint(1), sightseeing tinyint(1) ,
        // nightlife tinyint(1),language_preffered tinyint(1), smoking_preffered tinyint(1), age_group tinyint(1))
        //http://localhost:8080/demo/add?tid=1&tuid=1&location=Paris&initialdate=13/04/2019&finalDate=15/04/2019&trekking=1&religious=1&localinteraction=1&sighseeing=0&nightlife=1&language=2&smoking=0&sports=1&age=3
        Trip trip=new Trip();
        trip.setAge(age);
        trip.setInitialDate(initialDate);
        trip.setLanguage(language);
        trip.setLocalInteraction(localinteraction);
        trip.setLocation(location);
        trip.setNightlife(nightlife);
        trip.setReligious(religious);
        trip.setSightseeing(sighseeing);
        trip.setSmoking(smoking);
        trip.setSports(sports);
        trip.setTid(Integer.parseInt(tid));
        trip.setTrekking(trekking);
        trip.setTuid(Integer.parseInt(tuid));
        trip.setFinalDate(finalDate);

        tripRepository.save(trip);
        Utils util=new Utils();
        List<String> list1 = new ArrayList<>();
        List<String> list2 = new ArrayList<>();
        List<String> list3 = new ArrayList<>();
        list1 = util.groupTrip(trip.getTid(),tripRepository,customerRepository);

        for(String link:list1){
            list2.add(link.split(":")[1]);
            list3.add(link.split(":")[0]);

        }

        ModelAndView mv = new ModelAndView();

        mv.setViewName("groupData.jsp");
        boolean isEmpty = false;
        if(list2.isEmpty()){
            isEmpty = true;
        }
        mv.addObject("isEmpty",isEmpty);
        mv.addObject("cotravellersModeOfContact", list3);
        mv.addObject("cotravellersLinks", list2);

        return mv;
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Trip> getAllUsers() {
        // This returns a JSON or XML with the users
        return tripRepository.findAll();
    }

//    @GetMapping(path="/findGroup")
//        public @ResponseBody String findGroup(Model model, @RequestParam Integer tid){
//          return "/src/main/resources/static/InterestForm.jsp";
//        }


//    public String findGroup(Model model, @RequestParam Integer tid) {
//        System.out.print(tid + "*********\n\n\n\n\n\n\n\n\n");
//        Trip trip = tripRepository.findById(tid).get();
//        Customer customer = customerRepository.findById(trip.getTuid()).get();
////            Model
//        model.addAttribute("name", customer.getName());
//        model.addAttribute("location",trip.getLocation());
//        model.addAttribute("initialDate", trip.getInitialDate());
//        model.addAttribute("finalDate",trip.getFinalDate());
//        model.addAttribute("phone",customer.getPhone());
//        model.addAttribute("email",customer.getEmailID());
//        return "InterestsForm.jsp";
//    }
    @RequestMapping(value = "/findGroup", method = RequestMethod.GET)
    public ModelAndView findGroup(@RequestParam(value = "tid", required = false ) Integer tid)
    {

        ModelAndView mv = new ModelAndView();

        mv.setViewName("InterestsForm.jsp");

        Trip trip = tripRepository.findById(tid).orElse(new Trip());

        Customer customer = customerRepository.findById(trip.getTuid()).orElse(new Customer());
        System.out.println(customer.toString());

        mv.addObject("email",customer.getEmailID());
        mv.addObject("location",trip.getLocation());
        mv.addObject("initialDate",trip.getInitialDate());
        mv.addObject("finalDate",trip.getFinalDate());
        mv.addObject("phone",customer.getPhone());
        mv.addObject("name",customer.getName());

        return mv;
    }

}

